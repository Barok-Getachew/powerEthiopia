import 'package:ethiosolar_app/app/core/utils/theme/theme.dart';
import 'package:flutter/material.dart';
import 'package:sizer/sizer.dart' as sizer;

String _appTheme = "primary";

const num FIGMA_DESIGN_WIDTH = 375;
const num FIGMA_DESIGN_HEIGHT = 812;

extension ResponsiveExtension on num {
  /// This method is used to get device viewport width.
  double get _width => sizer.Device.width;

  /// This method is used to get device viewport height.
  double get _height => sizer.Device.height;

  /// This method is used to set padding/margin (for the left and Right side) &
  /// width of the screen or widget according to the Viewport width.
  double get h => ((this * _width) / FIGMA_DESIGN_WIDTH);

  /// This method is used to set padding/margin (for the top and bottom side) &
  /// height of the screen or widget according to the Viewport height.
  double get v => (this * _height) / (FIGMA_DESIGN_HEIGHT);

  /// This method is used to set smallest px in image height and width
  double get adaptSize {
    var height = v;
    var width = h;
    return height < width ? height : width;
  }

  /// This method is used to set text font size according to Viewport
  double get fSize => adaptSize;
}

class AppDecoration {
  // Fill decorations
  static BoxDecoration get fillGray => BoxDecoration(
        color: appTheme.gray100,
      );
  static BoxDecoration get fillPrimary => BoxDecoration(
        color: theme.colorScheme.primary,
      );
  static BoxDecoration get fillIndigo => BoxDecoration(
        color: appTheme.indigo800,
      );
  static BoxDecoration get fillPrimaryContainer => BoxDecoration(
        color: theme.colorScheme.primaryContainer,
      );

  // Outline decorations
  static BoxDecoration get outlineBlack => BoxDecoration(
        color: theme.colorScheme.onPrimary,
        boxShadow: [
          BoxShadow(
            color: appTheme.black900.withOpacity(0.1),
            spreadRadius: ResponsiveExtension(2).h,
            blurRadius: ResponsiveExtension(2).h,
            offset: const Offset(
              0,
              0,
            ),
          ),
        ],
      );
  static BoxDecoration get outlineGray => BoxDecoration(
        border: Border(
          top: BorderSide(
            color: appTheme.gray600,
            width: ResponsiveExtension(1).h,
          ),
          bottom: BorderSide(
            color: appTheme.gray600,
            width: ResponsiveExtension(1).h,
          ),
        ),
      );
  static BoxDecoration get outlineGray600 => BoxDecoration(
        border: Border.all(
          color: appTheme.gray600,
          width: ResponsiveExtension(1).h,
          strokeAlign: BorderSide.strokeAlignCenter,
        ),
      );
}

class BorderRadiusStyle {
  // Circle borders
  static BorderRadius get circleBorder17 => BorderRadius.circular(
        ResponsiveExtension(17).h,
      );

  // Rounded borders
  static BorderRadius get roundedBorder10 => BorderRadius.circular(
        ResponsiveExtension(10).h,
      );
  static BorderRadius get roundedBorder5 => BorderRadius.circular(
        ResponsiveExtension(5).h,
      );
}

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [newTheme].
  void changeTheme(String newTheme) {
    _appTheme = newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      scaffoldBackgroundColor: appTheme.gray100,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.indigo800,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(ResponsiveExtension(10).h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray60019,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light();
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => const Color(0XFF000000);

  // Gray
  Color get gray100 => const Color(0XFFF5F5F5);
  Color get gray400 => const Color(0XFFC4C4C4);
  Color get gray600 => const Color(0XFF7A7A7A);
  Color get gray60019 => const Color(0X19707070);
  Color get gray900 => const Color(0XFF222222);
  Color get gray40033 => const Color(0X33AFAFAF);

  // Indigo
  Color get indigo800 => const Color(0XFF1C4588);

  // White
  Color get whiteA700 => const Color(0XFFFFFFFF);
}

ColorScheme get lightAppTheme => light_theme.colorScheme;
PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
